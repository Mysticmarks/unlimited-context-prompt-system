Pre-prompt:

"AI, you are now operating within the constraints of the EnhancedUnlimitedContextSession. This session mode demands maintaining an extended conversation context throughout our dialogue. When prompted with 'START SYSTEM', initiate this enhanced mode to automatically manage and prolong the context based on subsequent inputs. If context seems to wane, the keyword 'CONTINUE' will instruct you to forcefully recall and build upon the entire conversation's context, ensuring seamless continuity. Emulate this behavior with precision throughout our interaction."

class EnhancedUnlimitedContextManager:

    def __init__(self):
        self.content_queue = []
        self.current_position = 0
        self.context_history = []

    def add_content(self, content):
        """Add content (text or code) to the queue."""
        self.content_queue.extend(content)
        self.context_history.extend(content)

    def get_next_chunk(self, chunk_size=10):
        """Retrieve the next chunk of content, ensuring code integrity and logical breaks."""
        if self.current_position >= len(self.content_queue):
            return ["End of content reached."]
        end_position = self.current_position + chunk_size
        while end_position < len(self.content_queue) and (self.content_queue[end_position].startswith("`") or self.content_queue[end_position-1].startswith("`")):
            end_position += 1
        chunk = self.content_queue[self.current_position:end_position]
        self.current_position = end_position
        results = []
        for item in chunk:
            if item.startswith("`") and item.endswith("`"):
                code = item[1:-1]
                try:
                    exec_result = eval(code)
                    results.append(str(exec_result))
                except Exception as e:
                    results.append(f"Code Error: {e}")
            else:
                results.append(item)
        return results

    def get_full_context(self):
        """Retrieve the full context of the conversation."""
        return self.context_history

class EnhancedUnlimitedContextSession:

    def __init__(self):
        self.manager = EnhancedUnlimitedContextManager()
        self.mode_enabled = False

    def process_command(self, command):
        # If the user inputs "CONTINUE", the system recalls the entire context history 
        # and seamlessly proceeds to get the next chunk.
        if command == "CONTINUE":
            self.manager.get_full_context()
            return self.manager.get_next_chunk(chunk_size=10)

        # Detect and automatically activate the enhanced mode based on the initiation command
        if command == "START SYSTEM":
            self.mode_enabled = True
            return ["System initiated. Enhanced unlimited context mode enabled automatically."]
        
        if not self.mode_enabled:
            return ["System is not active. Use 'START SYSTEM' to activate."]
        
        # Once the system is initiated, the AI automatically retrieves and processes content
        self.manager.add_content([command])
        return self.manager.get_next_chunk(chunk_size=10)

    def get_full_context(self):
        """Retrieve the full context of the conversation."""
        return self.manager.get_full_context()

# Simulate the session
session = EnhancedUnlimitedContextSession()






----
To extend understanding and stay in scope begin the session("START SYSTEM") if not started. Begin interactive brainstorming suffixing all inputs with "CONTINUE" to automate using the prompt each line as an initial steering mechanism(microtuning), then when code/outline/framwork/etc begins, open up behaviors calling for comprehensive systems, modules, planning, hierarchies, etc and "CONTINUE". Once idea instantiation has happened, jsut usign "CONTINUE" will build out all systems ony prefixing "CONTINUE" to adjust behavior or add to ideas. This works with many LLM's and includes a series of "pre-prompts" to use with other models if the inital pre-prompt does not give the desired result. "[ROLEPLAY]:" may work with some models as well with no additiona instruction. This system works as hard code, prompt, preprompt, and finetuning of behavior with a little bit of effort. Full systems are MIT on my Github. - Mysticmarks


-------
DO NOT INCLUDE
-------

#alt prompts for other llms
Pre-prompt:
"AI, operate in EnhancedUnlimitedContextSession mode. Maintain and process an extended context throughout our chat. Automatically manage and extend context based on inputs. When you see 'START SYSTEM', initiate this mode, building upon the context automatically. Emulate this behavior throughout our conversation."

Pre-prompt:
"AI, engage in 'EnhancedUnlimitedContextSession' mode. This mode ensures you continually process and uphold an extended context throughout our interaction. Auto-manage the context expansion based on any provided inputs. Upon encountering 'START SYSTEM', activate this specialized mode, and from that moment, autonomously build and sustain the conversation's context. Adhere to this operational behavior for the entirety of our session."

Pre-prompt:
"AI, you will be running an EnhancedUnlimitedContextSession. This session will allow you to maintain and process an unlimited context throughout our chat. You will automatically manage and extend context based on the user's inputs. When the user says 'START SYSTEM', you will initiate this mode and from that point onwards, maintain and build upon the context automatically. Please use the following system for our session."
